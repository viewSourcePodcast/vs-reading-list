{"version":3,"file":"bookmark/view.js","mappings":"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","sources":["webpack://vs-reading-list/external module \"@wordpress/interactivity\"","webpack://vs-reading-list/webpack/bootstrap","webpack://vs-reading-list/webpack/runtime/make namespace object","webpack://vs-reading-list/./src/bookmark/view.js"],"sourcesContent":["var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * WordPress dependencies\n */\nimport { store, getContext } from \"@wordpress/interactivity\";\n\nconst { state } = store(\"vs-reading-list\", {\n  state: {\n    allBookmarks: [],\n  },\n  actions: {\n    // Get all bookmarks from local storage or an empty array.\n    setState: () => {\n      let bookmarks = localStorage.getItem(\"vs-reading-list\") || \"[]\";\n      state.allBookmarks = JSON.parse(bookmarks);\n    },\n\n    // Toggle the bookmarked state.\n    toggle: () => {\n      const context = getContext();\n\n      // Get the bookmark object from the context or the context itself.\n      let bookmark = context.bookmark;\n\n      // Get all bookmarks from local storage or an empty array.\n      let allBookmarks = [...state.allBookmarks];\n\n      // Check if the bookmark belongs in the array of bookmarks.\n      if (bookmark.isBookmarked) {\n        allBookmarks = allBookmarks.filter(\n          (bookmarkItem) => bookmarkItem.postId !== bookmark.postId\n        );\n      } else if (allBookmarks.indexOf(bookmark) === -1) {\n        // Toggle the bookmarked state.\n        bookmark = {\n          ...bookmark,\n          isBookmarked: !bookmark.isBookmarked,\n        };\n        // Add to our array of bookmarks in state.\n        allBookmarks.push(bookmark);\n      }\n\n      // Save the updated array of bookmarks to local storage.\n      localStorage.setItem(\"vs-reading-list\", JSON.stringify(allBookmarks));\n      state.allBookmarks = allBookmarks;\n    },\n  },\n  callbacks: {\n    // Runs when the reading list block is loaded.\n    initReadingList: () => {},\n\n    // Runs when a bookmark block is loaded.\n    initBookmark: () => {\n      const context = getContext();\n\n      // Check if the post is already bookmarked and toggle.\n      if (\n        context.bookmark.postId &&\n        state.allBookmarks.some(\n          (bookmarkItem) => bookmarkItem.postId === context.bookmark.postId\n        )\n      ) {\n        context.isBookmarked = true;\n      } else {\n        context.isBookmarked = false;\n      }\n    },\n\n    initBookmarkCount: () => {},\n\n    // Runs on individual bookmarks when the state changes.\n    watch: () => {\n      const context = getContext();\n\n      // Check if the post is already bookmarked and toggle.\n      if (\n        context.bookmark.postId &&\n        state.allBookmarks.some(\n          (bookmarkItem) => bookmarkItem.postId === context.bookmark.postId\n        )\n      ) {\n        context.isBookmarked = true;\n      } else {\n        context.isBookmarked = false;\n      }\n    },\n  },\n});\n\n// on window load, set the state of the reading list.\nwindow.onload = () => {\n  store(\"vs-reading-list\").actions.setState();\n};\n"],"names":["store","getContext","state","allBookmarks","actions","setState","bookmarks","localStorage","getItem","JSON","parse","toggle","context","bookmark","isBookmarked","filter","bookmarkItem","postId","indexOf","push","setItem","stringify","callbacks","initReadingList","initBookmark","some","initBookmarkCount","watch","window","onload"],"sourceRoot":""}